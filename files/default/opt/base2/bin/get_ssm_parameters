#!/usr/bin/env ruby

# get_secrets

# Gets secrets from ssm parameters

# Parameters
#   '-r', '--region' - specify a aws region i.e. -r ap-southeast-2 [Required]
#   '-e', '--environment' - specify environment name [Required]
#   '-o', '--override-file' - specify the location of the override file [Optional]
#   '-d', '--delimiter' - specify a custom delimiter in your parameters

require 'aws-sdk'

# Defaults
override_file = "/etc/chef/override.json"
parameter_delimiter = ".."

class ::Hash
  def deep_merge(second)
    merger = proc {|key, v1, v2| Hash === v1 && Hash === v2 ? v1.merge(v2, &merger) : Array === v1 && Array === v2 ? v1 | v2 : [:undefined, nil, :nil].include?(v2) ? v1 : v2}
    self.merge(second.to_h, &merger)
  end
end


until ARGV.empty?
  if ARGV.first.start_with?('-')
    case ARGV.shift
    when '-r', '--region'
      region = ARGV.shift
    when '-e', '--environment-name'
      environment = ARGV.shift
    when '-o', '--override-file'
      override_file = ARGV.shift
    when '-d', '--delimiter'
      parameter_delimiter = ARGV.shift
    end
  else
    ARGV.shift
  end
end

if !region || !environment
  abort "ERROR: one or more parameters not supplied\nRequired `--region`, `--environment`"
end

ssm = Aws::SSM::Client.new(region: region)

# Initalize parameter name array
parameters = []

#describe_parameters({filters: [{ key: "Name", values: ["default"] }]},next_token)
def get_params(client,params, filter, next_token=nil)
  filters = [{ key: "Name", values: [filter] }]
  resp = client.describe_parameters({filters: filters, max_results: 10, next_token: next_token})
  resp.parameters.each { |param| params << param.name }
  # loop over params and add to array
  next_token = resp.next_token
  if !next_token.nil?
    get_params(client,params, filter, next_token)
  end
  return params
end
# Get all default parameters
parameters = get_params(ssm, parameters, "default")
parameters = get_params(ssm, parameters, environment)

# Exit 1 if no parameters are found
abort("ERROR: No secrets found in #{environment} environment or default parameter sets") unless parameters.any?

secrets = []
parameters.each_slice(10) do |params|
	secrets << ssm.get_parameters({names: params,with_decryption: true,}).parameters
end
override = {}

secrets.flatten(1).each do |s|
  attributes = s.name.split(parameter_delimiter).drop(1)
  i = 0;
  attributes.reduce(override) do |hash,key|
    hash[key] = if (i += 1) == attributes.length
      s.value
    else
      hash[key] || {}
    end
  end
end

if File.file?(override_file)
  puts "INFO: #{override_file} exits. Loading file..."
  temp_override = JSON.parse(File.read(override_file))
  override = override.deep_merge(temp_override)
end

puts "INFO: Writing secrets to #{override_file}"
File.open(override_file,"w") { |f| f.write(JSON.pretty_generate(override))}
